// Generated by CoffeeScript 1.3.3

dojo.provide('app.LoginDialog');

dojo.require('dijit.Dialog');

dojo.require('dijit.form.Button');

dojo.require('dijit.form.ValidationTextBox');

dojo.declare('app.LoginDialog', [dijit.Dialog, app.Common], {
  app: 'app.LoginDialog',
  title: 'ユーザー認証',
  style: 'width:240px;',
  components: {
    username: null,
    password: null,
    button: null
  },
  data: null,
  postCreate: function() {
    this.inherited(arguments);
    return this._getHashData(function(hash) {
      var user;
      if (hash.user != null) {
        user = hash.user;
      } else {
        user = '';
      }
      $(this.containerNode).append('<div style="float:left;padding-top:2px;font-size:110%;">ユーザー</div>');
      this.components.username = new dijit.form.ValidationTextBox({
        name: 'username',
        required: true,
        value: user,
        style: 'width:150px;float:right;'
      }).placeAt(this.containerNode);
      $(this.containerNode).append('<div style="height:8px;clear:both;"></div>');
      $(this.containerNode).append('<div style="float:left;padding-top:2px;font-size:110%;">パスワード</div>');
      this.components.password = new dijit.form.ValidationTextBox({
        name: 'password',
        type: 'password',
        required: true,
        style: 'width:150px;float:right;'
      }).placeAt(this.containerNode);
      $(this.containerNode).append('<div style="clear:both;height:8px;"></div>');
      this.components.loginButton = new dijit.form.Button({
        label: 'ログイン',
        style: 'float:right;'
      }).placeAt(this.containerNode);
      $(this.containerNode).append('<div style="clear:both"></div>');
      return dojo.connect(this.components.loginButton, 'onClick', this, this.authentication);
    });
  },
  authentication: function() {
    var data, that;
    if (this.components.username.getValue() === 'register') {
      return dojo.publish('app/Hash/changeHash', [
        {
          register: ''
        }
      ]);
    }
    if (this.components.username.isValid() && this.components.password.isValid()) {
      data = this.components.username.getValue() + '@' + this.components.password.getValue();
      that = this;
      return dojo.xhrPost({
        url: 'php/ctrlUser.php',
        handleAs: 'json',
        content: {
          method: 'getUserData',
          value: data
        },
        load: function(data) {
          if (data === 'user-error') {
            return that.buttonInitialize(['username', 'password']);
          } else if (data === 'pass-error') {
            return that.buttonInitialize(['password']);
          } else {
            that.data = data;
            return that.onExecute();
          }
        },
        error: function(error) {
          return console.log('app.LoginDialog->authentication [error] ', error);
        }
      });
    }
  },
  buttonInitialize: function(node) {
    var i, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = node.length; _i < _len; _i++) {
      i = node[_i];
      this.components[i].setValue('');
      _results.push(this.components[i].isValid());
    }
    return _results;
  },
  onShow: function() {
    $(this.closeButtonNode).hide();
    this.inherited(arguments);
    dojo.publish('app/App/layerAllShow');
    return dojo.publish('app/App/layerFadeIn');
  },
  onHide: function() {
    this.inherited(arguments);
    if (this.data != null) {
      dojo.publish('app/App/layerAllHide');
      return dojo.publish('app/App/layerFadeOut');
    }
  },
  getData: function() {
    return this.data;
  }
});
