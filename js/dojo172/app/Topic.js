// Generated by CoffeeScript 1.3.3

dojo.provide('app.Topic');

dojo.require('app.TopicUnit');

dojo.require("dijit._Widget");

dojo.require("dijit._Templated");

dojo.require("dijit.layout.BorderContainer");

dojo.require("dijit.layout.ContentPane");

dojo.require("dijit.layout.AccordionContainer");

dojo.require('dijit.MenuBar');

dojo.require('dijit.MenuItem');

dojo.require('dijit.DropDownMenu');

dojo.require('dijit.PopupMenuBarItem');

dojo.require('dijit.PopupMenuBarItem');

dojo.require('dijit.Tree');

dojo.require('dojo.data.ItemFileReadStore');

dojo.require('dijit.tree.ForestStoreModel');

dojo.declare('app.Topic', [dijit._Widget, dijit._Templated, app.Common], {
  app: 'app.Topic',
  widgetsInTemplate: true,
  templateString: dojo.cache('app', 'templates/Topic.html'),
  lastCid: null,
  nowPage: 0,
  nowTopicId: 0,
  store: null,
  constructor: function() {
    this.inherited(arguments);
    console.log('app.Topic->Constructor');
    return this.setSubscribe();
  },
  postCreate: function() {
    this.inherited(arguments);
    console.log('app.Topic->postCreate');
    this.createMain();
    this.createAcMenu();
    return dojo.publish('app/Hash/addCallback', ['app/Topic/onHashChange']);
  },
  setSubscribe: function() {
    var h, handles;
    handles = [];
    handles.push(dojo.subscribe('app/Topic/updateMenubar', this, this.createAcMenuMenubar));
    handles.push(dojo.subscribe('app/Topic/updateMenuTree', this, this.setAcMenuTree));
    handles.push(dojo.subscribe('app/Topic/clearNowPage', this, function() {
      return this.nowPage = 0;
    }));
    handles.push(dojo.subscribe('app/Topic/updateTopic', this, this.setTopic));
    handles.push(dojo.subscribe('app/Topic/moveTop', this, this.moveTop));
    handles.push(dojo.subscribe('app/Topic/onHashChange', this, this.onHashChange));
    return h = dojo.connect(this, 'uninitialize', this, function() {
      var handle, _i, _len, _results;
      dojo.disconnect(h);
      _results = [];
      for (_i = 0, _len = handles.length; _i < _len; _i++) {
        handle = handles[_i];
        _results.push(dojo.unsubscribe(handle));
      }
      return _results;
    });
  },
  onHashChange: function(hash) {
    if (this.nowTopicId === hash.tid) {
      return false;
    }
    this.nowTopicId = hash.tid;
    if ((this.nowTopicId != null) && this.nowTopicId > 0) {
      return dojo.publish('app/Topic/updateTopic', [this.nowTopicId]);
    } else {
      return dojo.publish('app/Topic/moveTop');
    }
  },
  createMain: function() {
    return new app.Div({
      topic: 'トピック掲示板',
      body: '',
      toggle: true
    }).placeAt(this.mainTop).startup();
  },
  createAcMenu: function() {
    dojo.publish('app/Topic/updateMenubar');
    return this._getTopicList({}, function() {
      return this.setAcMenuTree();
    });
  },
  createAcMenuMenubar: function() {
    return this._getCategoryList(function(data) {
      var func, key, menubar, pCategory, value;
      this.inner_menu_menubar.destroyDescendants();
      menubar = new dijit.MenuBar({
        style: 'border-width: 1px 0;'
      });
      menubar.addChild(new dijit.PopupMenuBarItem({
        type: 'top',
        label: 'トップ',
        popup: new dijit.DropDownMenu()
      }));
      menubar.addChild(new dijit.PopupMenuBarItem({
        type: 'list',
        label: '一覧',
        popup: new dijit.DropDownMenu()
      }));
      pCategory = new dijit.DropDownMenu();
      for (key in data) {
        value = data[key];
        pCategory.addChild(new dijit.MenuItem({
          cid: value.id,
          type: 'category',
          label: '(' + value.id + ')' + value.name
        }));
      }
      menubar.addChild(new dijit.PopupMenuBarItem({
        label: "カテゴリー",
        popup: pCategory
      }));
      menubar.addChild(new dijit.PopupMenuBarItem({
        type: 'log',
        label: "過去ログ取得",
        popup: new dijit.DropDownMenu()
      }));
      menubar.placeAt(this.inner_menu_menubar.domNode);
      func = function(data) {
        if (data.type === 'top') {
          return dojo.publish('app/Hash/changeHash', [
            {
              tid: null
            }
          ]);
        } else if (data.type === 'list') {
          return this.setAcMenuTree();
        } else if (data.type === 'category') {
          return this.setAcMenuTree(data.cid);
        } else if (data.type === 'log') {
          return this._getTopicList({
            page: ++this.nowPage
          }, function() {
            return this.setAcMenuTree(this.lastCid);
          });
        }
      };
      dojo.connect(menubar, 'onItemClick', this, func);
      dojo.connect(pCategory, 'onItemClick', this, func);
      return this.inner_menu.resize();
    });
  },
  setAcMenuTree: function(cid) {
    this.lastCid = cid;
    this.inner_menu_tree.destroyDescendants();
    return this._getTable('topic', null, function(data) {
      var h, key, lastDatetime, lastKey, list, originalData, prefix, sortedData, topic, value, _i, _len;
      originalData = dojo.clone(data);
      sortedData = [];
      for (key in originalData) {
        value = originalData[key];
        if (value.last_update === null) {
          originalData[key].last_update = '000000/00 00:00:00';
        } else {
          originalData[key].last_update = originalData[key].last_update.split('-').join('/');
        }
      }
      while (1.) {
        lastKey = 0;
        lastDatetime = '0000/00/00 00:00:00';
        for (key in originalData) {
          value = originalData[key];
          if (lastDatetime <= value.last_update) {
            lastDatetime = value.last_update;
            lastKey = key;
          }
        }
        if (lastKey === 0) {
          break;
        }
        sortedData.push(originalData[lastKey]);
        delete originalData[lastKey];
      }
      list = {
        identifier: 'id',
        label: 'label',
        items: []
      };
      prefix = this.lastCid != null ? cid + ': ' : '';
      for (_i = 0, _len = sortedData.length; _i < _len; _i++) {
        topic = sortedData[_i];
        console.log('cid:', cid, 'category_id', topic.category_id);
        if (!(cid != null) || cid === topic.category_id) {
          list.items.push({
            id: 'topic-' + topic.id,
            label: prefix + topic.title + '（' + topic.count + '）',
            tid: topic.id,
            type: 'top'
          });
        }
      }
      h = new dijit.Tree({
        model: new dijit.tree.ForestStoreModel({
          store: this.store = new dojo.data.ItemFileReadStore({
            data: list
          }),
          query: {
            type: 'top'
          }
        }),
        openOnClick: true,
        showRoot: false,
        style: 'padding:0px;overflow-x:hidden;'
      }).placeAt(this.inner_menu_tree.domNode);
      dojo.connect(h, 'onClick', this, function(item) {
        var id;
        id = this.store.getValue(item, 'tid');
        return dojo.publish('app/Hash/changeHash', [
          {
            tid: id
          }
        ]);
      });
      return this.inner_menu.resize();
    });
  },
  moveTop: function() {
    var _this = this;
    if ($(this.mainTemp).css('display') === 'block') {
      return $(this.mainTemp).fadeOut(100, function() {
        return $(_this.mainTop).fadeIn(100);
      });
    }
  },
  setTopic: function(topic_id) {
    var func,
      _this = this;
    func = function(topic, posts) {
      var innerFunc;
      innerFunc = function() {
        $(_this.mainTemp).empty();
        new app.TopicUnit({
          topic: topic,
          posts: posts
        }).placeAt(_this.mainTemp).startup();
        return $(_this.mainTemp).fadeIn(100);
      };
      if ($(_this.mainTop).css('display') === 'block') {
        return $(_this.mainTop).fadeOut(100, function() {
          return innerFunc();
        });
      } else if ($(_this.mainTemp).css('display') === 'block') {
        return $(_this.mainTemp).fadeOut(100, function() {
          return innerFunc();
        });
      }
    };
    return this._getTable('topic', topic_id, function(topic) {
      if (topic != null) {
        return this._getPost({
          topic_id: topic_id
        }, function(posts) {
          return func(topic, posts);
        });
      } else {
        return this._getTopicList({
          conditions: "`topics`.id = " + topic_id
        }, function(topic) {
          topic = dojo.clone(topic)[0];
          if (topic != null) {
            return this._getPost({
              topic_id: topic_id
            }, function(posts) {
              return func(topic, posts);
            });
          } else {
            console.log('error: there is no topic (topic_id:' + topic_id + ')');
            return dojo.publish('app/Hash/changeHash', [
              {
                tid: null
              }
            ]);
          }
        });
      }
    });
  }
});
