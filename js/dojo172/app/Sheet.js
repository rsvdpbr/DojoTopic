// Generated by CoffeeScript 1.3.3

dojo.provide('app.Sheet');

dojo.require('dijit._Widget');

dojo.require('dijit._Templated');

dojo.require('dijit.layout.BorderContainer');

dojo.require('dijit.layout.ContentPane');

dojo.require('dijit.layout.AccordionContainer');

dojo.require('dijit.Tree');

dojo.require('dojo.data.ItemFileReadStore');

dojo.require('dijit.tree.ForestStoreModel');

dojo.declare('app.Sheet', [dijit._Widget, dijit._Templated, app.Common], {
  app: 'app.Sheet',
  widgetsInTemplate: true,
  templateString: dojo.cache('app', 'templates/Sheet.html'),
  data: {},
  constructor: function() {
    this.inherited(arguments);
    return console.log('app.Sheet->Constructor');
  },
  postCreate: function() {
    var body;
    this.inherited(arguments);
    this.createTree();
    body = "左のメニューからデータを選択してください。<br />\n表示される各データの右上のボタンから、以下の操作を行うことができます。<br />\n　[hide] 一時非表示、表示<br />\n　[bookmark] 個人ブックマークに追加・削除<br />\n　[share] 共有ブックマークに追加・削除<br />\n　[close] 非表示<br />";
    return new app.Div({
      topic: '申請書確認',
      body: body
    }).placeAt(this.main.domNode);
  },
  createTree: function() {
    this._getTableData('members', function(data) {
      return this.data['members'] = data;
    });
    return this._getTableData('sheet_types', function(data) {
      this.data['sheet_types'] = data;
      return this._getTableData('sheets', function(data) {
        var h, i, key, list, sheet_identifier_list, sheet_list, temp, _i, _len, _ref, _results;
        this.data['sheets'] = data;
        temp = {};
        _ref = dojo.clone(data);
        for (key in _ref) {
          i = _ref[key];
          if (!(temp[i.sheet_type_id] != null)) {
            temp[i.sheet_type_id] = [];
          }
          temp[i.sheet_type_id].push(i);
        }
        data = temp;
        for (key in data) {
          list = data[key];
          sheet_list = [];
          sheet_identifier_list = [];
          for (_i = 0, _len = list.length; _i < _len; _i++) {
            i = list[_i];
            if (i.event_name.indexOf('デ') !== -1) {
              i.event_name = '# ' + i.event_name;
            } else {
              i.event_name = '- ' + i.event_name;
            }
            i.label = i.event_name;
            i.type = 'sheet';
            sheet_list.push(i);
            sheet_identifier_list.push({
              _reference: i.id
            });
          }
          data[key] = {
            identifier: 'id',
            label: 'label',
            items: sheet_list
          };
          data[key].items.push({
            id: 'summary',
            label: '全データ',
            type: 'top'
          });
          data[key].items.push({
            id: 'sheet_list',
            label: 'データ一覧 (' + sheet_identifier_list.length + ')',
            type: 'top',
            children: sheet_identifier_list
          });
          data[key].items.push({
            id: 'bookmark',
            label: '個人ブックマーク',
            type: 'top',
            children: [
              {
                _reference: 4
              }
            ]
          });
          data[key].items.push({
            id: 'share',
            label: '共有ブックマーク',
            type: 'top',
            children: []
          });
          data[key].items.push({
            id: 'comment',
            label: '未読コメント',
            type: 'top',
            children: []
          });
        }
        _results = [];
        for (key in data) {
          list = data[key];
          h = new dijit.Tree({
            model: new dijit.tree.ForestStoreModel({
              store: new dojo.data.ItemFileReadStore({
                data: list
              }),
              query: {
                type: 'top'
              }
            }),
            openOnClick: true,
            showRoot: false,
            title: this.data['sheet_types'][key]['sheet_name'],
            style: 'padding:0px;overflow-x:hidden;'
          }).placeAt(this.ac_menu);
          _results.push(dojo.connect(h, 'onClick', this, function(item) {
            return this.showSheet(item);
          }));
        }
        return _results;
      });
    });
  },
  showSheet: function(sheet) {
    var addDiv, addHr, body, i, key, members, val, _i, _len, _ref;
    sheet = this.data['sheets'][sheet['id'][0]];
    members = [];
    _ref = this.data['members'];
    for (key in _ref) {
      val = _ref[key];
      if (sheet.id === val.sheet_id) {
        members.push(val);
      }
    }
    addDiv = function(key, value) {
      return "<div style='font-weight:bold;text-align:right;width:120px;float:left;padding-right:8px;'>\n	" + key + "：\n</div>\n<div style='float:left;'>" + value + "</div>\n<div style='clear:both;'></div>";
    };
    addHr = function(h) {
      var m, p;
      if (h === void 0) {
        h = '';
        p = 3;
        m = 0;
      } else {
        h = '# ' + h;
        p = 0;
        m = 8;
      }
      return "<div style='border-bottom:1px solid #aaa;padding-bottom:" + p + "px;margin-bottom:3px;'>\n	<p style='font-weight:bold;color:#137;margin:" + m + "px 0 0 12px;'>\n	" + h + "\n	</p>\n</div>";
    };
    body = "<div style='float:right;'>申請日時：" + sheet.created + "</div>";
    body += addHr('企画概要');
    body += addDiv('企画名', sheet.event_name + '　(' + sheet.event_name_kana + ')');
    body += addDiv('企画詳細', sheet.event_description);
    body += addHr('団体概要');
    body += addDiv('団体名', sheet.group_name + '　(' + sheet.group_name_kana + ')');
    body += addDiv('団体活動内容', sheet.group_description);
    body += addDiv('団体構成人数', sheet.group_member_size);
    body += addDiv('団体活動場所', sheet.group_place);
    body += addDiv('団体活動曜日', sheet.group_day);
    body += addDiv('団体URL', sheet.group_url);
    for (_i = 0, _len = members.length; _i < _len; _i++) {
      i = members[_i];
      body += addHr(i.role);
      body += addDiv('氏名', i.name + '　(' + i.name_kana + ')');
      body += addDiv('学部学年', i.school + '学部 ' + i.grade + '年');
      body += addDiv('学籍番号', i.student_id);
      body += addDiv('電話番号', i.telephone);
      body += addDiv('PCアドレス', i.mail_pc);
      body += addDiv('携帯アドレス', i.mail_keitai);
      if (i.kennin !== '') {
        body += "<span style='color:#e57'>";
        body += addDiv('役職兼任', i.kennin.split('_')[0]);
        body += '</span>';
      }
    }
    return new app.Div({
      topic: sheet.event_name,
      body: body,
      sheetMenuEnable: true
    }).placeAt(this.main.domNode).startup();
  }
});
